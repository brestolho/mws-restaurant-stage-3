"use strict";!function(){function e(e){return new Promise(function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function t(t,n,o){var r,i=new Promise(function(i,u){e(r=t[n].apply(t,o)).then(i,u)});return i.request=r,i}function n(e,t,n){n.forEach(function(n){Object.defineProperty(e.prototype,n,{get:function(){return this[t][n]},set:function(e){this[t][n]=e}})})}function o(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return t(this[n],r,arguments)})})}function r(e,t,n,o){o.forEach(function(o){o in n.prototype&&(e.prototype[o]=function(){return this[t][o].apply(this[t],arguments)})})}function i(e,n,o,r){r.forEach(function(r){r in o.prototype&&(e.prototype[r]=function(){return e=this[n],(o=t(e,r,arguments)).then(function(e){if(e)return new c(e,o.request)});var e,o})})}function u(e){this._index=e}function c(e,t){this._cursor=e,this._request=t}function s(e){this._store=e}function p(e){this._tx=e,this.complete=new Promise(function(t,n){e.oncomplete=function(){t()},e.onerror=function(){n(e.error)},e.onabort=function(){n(e.error)}})}function a(e,t,n){this._db=e,this.oldVersion=t,this.transaction=new p(n)}function f(e){this._db=e}n(u,"_index",["name","keyPath","multiEntry","unique"]),o(u,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),i(u,"_index",IDBIndex,["openCursor","openKeyCursor"]),n(c,"_cursor",["direction","key","primaryKey","value"]),o(c,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach(function(t){t in IDBCursor.prototype&&(c.prototype[t]=function(){var n=this,o=arguments;return Promise.resolve().then(function(){return n._cursor[t].apply(n._cursor,o),e(n._request).then(function(e){if(e)return new c(e,n._request)})})})}),s.prototype.createIndex=function(){return new u(this._store.createIndex.apply(this._store,arguments))},s.prototype.index=function(){return new u(this._store.index.apply(this._store,arguments))},n(s,"_store",["name","keyPath","indexNames","autoIncrement"]),o(s,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),i(s,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),r(s,"_store",IDBObjectStore,["deleteIndex"]),p.prototype.objectStore=function(){return new s(this._tx.objectStore.apply(this._tx,arguments))},n(p,"_tx",["objectStoreNames","mode"]),r(p,"_tx",IDBTransaction,["abort"]),a.prototype.createObjectStore=function(){return new s(this._db.createObjectStore.apply(this._db,arguments))},n(a,"_db",["name","version","objectStoreNames"]),r(a,"_db",IDBDatabase,["deleteObjectStore","close"]),f.prototype.transaction=function(){return new p(this._db.transaction.apply(this._db,arguments))},n(f,"_db",["name","version","objectStoreNames"]),r(f,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach(function(e){[s,u].forEach(function(t){e in t.prototype&&(t.prototype[e.replace("open","iterate")]=function(){var t,n=(t=arguments,Array.prototype.slice.call(t)),o=n[n.length-1],r=this._store||this._index,i=r[e].apply(r,n.slice(0,-1));i.onsuccess=function(){o(i.result)}})})}),[u,s].forEach(function(e){e.prototype.getAll||(e.prototype.getAll=function(e,t){var n=this,o=[];return new Promise(function(r){n.iterateCursor(e,function(e){e?(o.push(e.value),void 0===t||o.length!=t?e.continue():r(o)):r(o)})})})});var d={open:function(e,n,o){var r=t(indexedDB,"open",[e,n]),i=r.request;return i.onupgradeneeded=function(e){o&&o(new a(i.result,e.oldVersion,i.transaction))},r.then(function(e){return new f(e)})},delete:function(e){return t(indexedDB,"deleteDatabase",[e])}};"undefined"!=typeof module?(module.exports=d,module.exports.default=module.exports):self.idb=d}();
function registerServiceWorker(){"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("/sw.js",{scope:"/"}).then(function(e){}).catch(function(e){console.log("ServiceWorker registration failed!")})})}registerServiceWorker(),"indexedDB"in window||console.log("This browser doesn't support IndexedDB");var dbPromise=idb.open("restaurantsAppDB",2,function(e){(console.log("making a new object store"),e.objectStoreNames.contains("restaurants")||e.createObjectStore("restaurants",{keyPath:"id"}),e.objectStoreNames.contains("reviews"))||e.createObjectStore("reviews",{keyPath:"id"}).createIndex("restaurant_id","restaurant_id");e.objectStoreNames.contains("reviewsOff")||e.createObjectStore("reviewsOffline",{keyPath:"updatedAt"})});function writeReviewsData(e,r){return dbPromise.then(function(t){var o=t.transaction(e,"readwrite");return o.objectStore(e).put(r),o.complete})}dbPromise.then(e=>{DBHelper.fetchRestaurantsFromServer((r,t)=>{t.forEach(function(r){e.transaction("restaurants","readwrite").objectStore("restaurants").put(r)})})}),dbPromise.then(e=>{DBHelper.fetchReviewsFromServer((r,t)=>{t.forEach(function(r){e.transaction("reviews","readwrite").objectStore("reviews").put(r)})})});
class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static fetchRestaurantsFromServer(e){fetch(DBHelper.DATABASE_URL+"restaurants/",{headers:{}}).then(e=>e.json()).then(t=>e(null,t)).catch(t=>{console.error("Fetch return error"),e(t,null)})}static fetchReviewsFromServer(e){console.log(DBHelper.DATABASE_URL+"reviews/"),fetch(DBHelper.DATABASE_URL+"reviews/",{headers:{}}).then(e=>e.json()).then(t=>e(null,t)).catch(t=>{console.error("Fetch return error"),e(t,null)})}static fetchRestaurants(e){return idb.open("restaurantsAppDB").then(function(e){return e.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(t=>e(null,t))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,s)=>{if(r)n(r,null);else{let r=s;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.id}_sm.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static fetchReviews(e){idb.open("restaurantsAppDB").then(function(e){return e.transaction("reviews","readonly").objectStore("reviews")}).then(t=>e(null,t))}static fetchAllReviews(e){DBHelper.fetchReviews((t,n)=>{if(t)e(t,null);else{const t=n.getAll();t?e(null,t):e("Reviews not found",null)}})}static submitReview(e,t){return fetch(DBHelper.DATABASE_URL+"reviews/",{body:JSON.stringify(e),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then(e=>e.json()).then(e=>(writeReviewsData("reviews",e),e)).catch(n=>{e.updatedAt=(new Date).getTime(),e.createdAt=(new Date).getTime(),writeReviewsDataOffline("reviewsOffline",e),console.log("Offline...Offline..."),console.log("Offline Mode: Review stored in IDB review2"),t(n,null)})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviews((n,r)=>{if(n)t(n,null);else{const n=r.index("restaurant_id").getAll(e);n?t(null,n):t("Reviews not found for that restaurant_id does not exist",null)}})}}