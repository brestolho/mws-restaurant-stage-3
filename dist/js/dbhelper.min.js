class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static fetchRestaurantsFromServer(e){fetch(DBHelper.DATABASE_URL+"restaurants/",{headers:{}}).then(e=>e.json()).then(t=>e(null,t)).catch(t=>{console.error("Fetch return error"),e(t,null)})}static fetchReviewsFromServer(e){console.log(DBHelper.DATABASE_URL+"reviews/"),fetch(DBHelper.DATABASE_URL+"reviews/",{headers:{}}).then(e=>e.json()).then(t=>e(null,t)).catch(t=>{console.error("Fetch return error"),e(t,null)})}static fetchRestaurants(e){return idb.open("restaurantsAppDB").then(function(e){return e.transaction("restaurants","readonly").objectStore("restaurants").getAll()}).then(t=>e(null,t))}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.find(t=>t.id==e);n?t(null,n):t("Restaurant does not exist",null)}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.cuisine_type==e);t(null,n)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((n,r)=>{if(n)t(n,null);else{const n=r.filter(t=>t.neighborhood==e);t(null,n)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,n){DBHelper.fetchRestaurants((r,s)=>{if(r)n(r,null);else{let r=s;"all"!=e&&(r=r.filter(t=>t.cuisine_type==e)),"all"!=t&&(r=r.filter(e=>e.neighborhood==t)),n(null,r)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].neighborhood),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,n)=>{if(t)e(t,null);else{const t=n.map((e,t)=>n[t].cuisine_type),r=t.filter((e,n)=>t.indexOf(e)==n);e(null,r)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.id}_sm.jpg`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static fetchReviews(e){idb.open("restaurantsAppDB").then(function(e){return e.transaction("reviews","readonly").objectStore("reviews")}).then(t=>e(null,t))}static fetchAllReviews(e){DBHelper.fetchReviews((t,n)=>{if(t)e(t,null);else{const t=n.getAll();t?e(null,t):e("Reviews not found",null)}})}static submitReview(e,t){return fetch(DBHelper.DATABASE_URL+"reviews/",{body:JSON.stringify(e),headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST"}).then(e=>e.json()).then(e=>(writeReviewsData("reviews",e),e)).catch(n=>{e.updatedAt=(new Date).getTime(),e.createdAt=(new Date).getTime(),writeReviewsDataOffline("reviewsOffline",e),console.log("Offline...Offline..."),console.log("Offline Mode: Review stored in IDB review2"),t(n,null)})}static fetchReviewsByRestaurantId(e,t){DBHelper.fetchReviews((n,r)=>{if(n)t(n,null);else{const n=r.index("restaurant_id").getAll(e);n?t(null,n):t("Reviews not found for that restaurant_id does not exist",null)}})}}